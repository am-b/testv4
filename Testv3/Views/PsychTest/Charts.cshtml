@model PagedList.IPagedList<Testv3.Models.TestViewModel>
@{
    ViewBag.Title = "Charts";
}


<div class="box">
    <div class="box-header">
        <h3 class="box-title">Overall report of student's test results</h3>
        <div class="box-tools pull-right">
            <button class="btn btn-box-tool" type="button" data-toggle="collapse" data-target="#LOL"  id="minMaxBtn">
                <span class="fa fa-minus" id="minMaxIcon"></span>
            </button>
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-7 col-xs-6">
                <div class="description-block border-right">
                    <h5 class="description-header" style="display:inline;">See results by: </h5>
                        <button class="btn btn-info btn-md" type="button" id="QuestionsBtn">Questions</button>
                        <button class="btn btn-info btn-md" type="button" id="GenderBtn">Gender</button>
                        <button class="btn btn-info btn-md" type="button" id="ProgramBtn">Program</button>
                        <button class="btn btn-info btn-md" type="button" id="YrLevelBtn">Year Level</button>
                        <button class="btn btn-info btn-md" type="button" id="AgeBtn">Age</button>
                </div>
            </div>

            
            <div class="col-sm-5 col-xs-6">
                <div class="description-block">
                    <h5 class="description-header" style="display:inline;">Total Test Completion: </h5><span class="description-text">@ViewBag.CountOfStudentsWithNoPsychTest/@ViewBag.CountOfTotalStudents students</span>

                    @if (@ViewBag.ListOfStudents != null)
                    {
                        <small><br />@ViewBag.ListOfStudents</small>
                        <button type="button" class="btn btn-info btn-sm" data-toggle="modal" data-target="#myModal">See list</button>
                        <div id="myModal" class="modal fade" role="dialog">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-body">
                                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                                        <table class="table">
                                            <tr>
                                                <th>
                                                    Student ID
                                                </th>
                                                <th>
                                                    Student Name
                                                </th>
                                            </tr>
                                            @foreach (var name in (List<Testv3.Models.TestViewModel>)ViewData["studentlist"])
                                            {
                                                <tr>
                                                    <td>
                                                        @name.StudentID
                                                    </td>
                                                    <td>
                                                        @name.StudentLastName, @name.StudentFirstName @name.StudentMiddleName
                                                    </td>
                                                </tr>
                                            }
                                        </table>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
    <div id="LOL" class="collapse in">
        <hr />
        <div class="box-body">
            
            <div id="myCharts"></div>

        </div>
   </div>
</div>

<!-- Modal -->
<div class="modal fade" id="myModal2" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-body">
                <strong>
                    There's not enough data to generate charts!
                </strong>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>


@Scripts.Render("~/bundles/jquery")

@if (@ViewBag.StudentInventorylist3Count == 0)
{
    @section Scripts {
        <script>

            $("#minMaxBtn").click(function () {
                $("span", this).toggleClass("fa-minus fa-plus");

            });

            $("#QuestionsBtn").click(function () {
                $("#myCharts").show();

            });
            $("#GenderBtn").click(function () {
                $("#myCharts").hide();

            });
            $("#ProgramBtn").click(function () {
                $("#myCharts").hide();

            });
            $("#YrLevelBtn").click(function () {
                $("#myCharts").hide();

            });
            $("#AgeBtn").click(function () {
                $("#myCharts").hide();

            });

            var charts = "myCharts";
            var jsonData = [];

            $.ajax({
                url: '/PsychTest/GetData',
                success: function (response) {

                    for (var i = 0; i < response.length; i++) {
                        // jsonData.push({ data: [{"Agree":response[i].countAgree}, {"Somewhat Agree": response[i].countSomewhatAgree}, {"Disagree": response[i].countDisagree}] });
                        jsonData.push({ data: [response[i].countAgree, response[i].countSomewhatAgree, response[i].countDisagree, response[i].questionItem] });
                    }
                    console.log(jsonData);

                    //pie chart
                    var chart$ = (function () {
                        var charts = [];

                        var MakePie = function (canvasId, inputData, title) {
                            if (canvasId !== null && canvasId !== undefined && canvasId.length > 0) {
                                if (inputData && inputData.length > 0) {
                                    if (title && title.length >= 0) {
                                        return drawChart(canvasId, "pie", ["Agree", "Somewhat Agree", "Disagree"], inputData, title);
                                    } else {
                                        console.error("MakePie - invalid chart Title");
                                        return;
                                    }
                                } else {
                                    console.error("MakePie - invalid chart data");
                                    return;
                                }
                            } else {
                                console.error("MakePie - invalid canvas id");
                                return;
                            }
                        };

                        function drawChart(canvasId, type, labels, inputData, title) {
                            console.log("inputdata: " + inputData);
                            charts[canvasId] = new Chart(document.getElementById(canvasId), {
                                type: type,
                                data: {
                                    labels: labels,
                                    datasets: [{
                                        backgroundColor: [
                                            "rgba(54, 162, 235, 0.2)",
                                            "rgba(255, 99, 132, 0.2)",
                                            "rgba(255, 159, 64, 0.2)",
                                            "rgba(255, 205, 86, 0.2)",
                                            "rgba(75, 192, 192, 0.2)",
                                            "rgba(153, 102, 255, 0.2)",
                                            "rgba(201, 203, 207, 0.2)"
                                        ],
                                        borderColor: [
                                            "rgb(54, 162, 235)",
                                            "rgb(255, 99, 132)",
                                            "rgb(255, 159, 64)",
                                            "rgb(255, 205, 86)",
                                            "rgb(75, 192, 192)",
                                            "rgb(153, 102, 255)",
                                            "rgb(201, 203, 207)"
                                        ],
                                        borderWidth: 1,
                                        data: inputData
                                    }]
                                },
                                options: {
                                    tooltips: {
                                        mode: 'label',
                                        callbacks: {
                                            label: function (tooltipItem, data) {
                                                return data['datasets'][0]['data'][tooltipItem['index']] + '%';
                                            }
                                        }
                                    },
                                    title: {
                                        display: true,
                                        text: title,
                                        fontSize: 15,
                                    },
                                    legend: { position: 'right' },
                                    responsive: false
                                }
                            });
                            return charts[canvasId] !== null;
                        }

                        return {
                            MakePie: MakePie
                        };
                    })();

                    var ui$ = (function () {
                        var BuildChartCont = function (parentId, inputData) {
                            if (parentId == null || parentId.length <= 0) {
                                console.error("BuildChartCont : Root container id is invalid!");
                                return false;
                            }

                            if (inputData == null || inputData.length <= 0) {
                                console.error(
                                    "BuildChartCont : Input data is null/undefined or has no items in it!"
                                );
                                return false;
                            }

                            var elementDom = document.getElementById(parentId);
                            for (var index = 0; index < inputData.length; index++) {

                                var element = inputData[index];
                                var canvasId = "CanvasId" + index;

                                var canvasDiv = document.createElement("div");
                                canvasDiv.setAttribute("style", "width:600px; height:200px;");

                                var canvasElem = document.createElement("canvas");
                                canvasElem.setAttribute("id", canvasId);
                                canvasElem.setAttribute("style", "width:600px; height:200px;");

                                var lineBreak = document.createElement("br");


                                canvasDiv.appendChild(canvasElem);
                                elementDom.appendChild(canvasDiv);

                                elementDom.appendChild(lineBreak);

                                if (!chart$.MakePie(canvasId, [parseInt(element.data[0]), parseInt(element.data[1]), parseInt(element.data[2])], element.data[3])) {
                                    console.error("BuildChartCont : Error While building Chart!");
                                    continue;
                                }
                            }
                            return true;
                        };
                        var showElement = function (elements, display) {
                            if (display) {
                                for (var i = 0; i < elements.length; i++) {
                                    document.getElementById(elements[i]).style.display = display;
                                }
                            } else {
                                for (var i = 0; i < elements.length; i++) {
                                    document.getElementById(elements[i]).style.display = "block";
                                }
                            }
                        };
                        return {
                            BuildChartCont: BuildChartCont,
                            showElement: showElement
                        };
                    })();

                    if (ui$.BuildChartCont(charts, jsonData)) {
                        ui$.showElement([charts], "block");
                    }





                }
            });
        </script>
    }
}

@if (@ViewBag.StudentInventorylist3Count >= 1)
{
    @section Scripts {
        <script type="text/javascript">
            $(window).on('load', function () {
                var rec = "@ViewBag.StudentInventorylist3Count";
                console.log(rec);
                $('#myModal2').modal('show');
        });
        </script>
    }
}



