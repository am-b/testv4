@model Testv3.Models.StudentCounsellingViewModel

@{
    ViewBag.Title = "Student's Counselling Record";
}
@if (TempData["Error"] != null)
{
    <br />
                    <div class="alert alert-danger alert-dismissable">
                        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                        <strong>@TempData["Error"]</strong>
                    </div>
}
@section Scripts{
    <script type="text/javascript">

        var category = [];
        var tag = [];

        $.ajax({
            url: '/CounsellingForms/GetTypeOfCases',
            success: function (response) {

                for (var i = 0; i < response.length; i++) {
                    category.push({ name: [response[i].name] });
                }

                var $tagTemp = $('#tagTemp').html();
                $('#tagTemp').remove();
                $('#CounellingCaseTagCont').delegate('.tag', 'click', clearTag);

                function subjectMatter() {
                    var $CounellingCaseOptTemp = $('#CounellingCaseOptTemp').html();
                    $('#CounellingCaseOptTemp').remove();
                    $('.CounellingCaseSelect').html("");
                    let html = '';
                    //populate dropdown
                    (category || []).forEach(function (item) {
                        html += $CounellingCaseOptTemp
                            .replace(/00CounellingCaseOpt/g, item.name)
                    })
                    $('.CounellingCaseSelect').html(html);

                    $(".CounellingCaseSelect").on('change', function () {
                        CounellingCaseIndex = $(this).prop('selectedIndex');

                        //push to tag container
                        // if (category[CounellingCaseIndex].name != category[0].name) {
                        if ($.inArray(category[CounellingCaseIndex].name, tag) > -1) {
                            alert("Tag already exists.");
                        } else {
                            tag.push(
                                category[CounellingCaseIndex].name
                            );
                        }
                        // }

                        render();
                        $(this).val(0);
                    })
                }
                subjectMatter();

                function clearTag(event) {
                    var $remove = $(event.target).closest('.tag');
                    i = $('#CounellingCaseTagCont').find('.tag').index($remove);
                    tag.splice(i, 1);

                    render();
                }

                //display to tag container
                function render() {
                    $('#CounellingCaseTagCont').html("");
                    let html1 = '';
                    (tag || []).forEach(function (item) {
                        html1 += $tagTemp
                            .replace(/00tagName/g, item)
                    })
                    $('#CounellingCaseTagCont').html(html1);
                    console.log("tag");
                    console.log(tag);
                }

            }
        });

        $("form").submit(function (e) {

                e.preventDefault();

                var token = $('input[name=__RequestVerificationToken]').val();
                console.log(token);

                $.post("@Url.Action("Counsellor", "CounsellingForms")",
                    {
                        name: tag, __RequestVerificationToken: $('input[name=__RequestVerificationToken]').val(), StudentUserID: $('input[name=StudentUserID]').val(),
                        Session: $('textarea[name=Session]').val(), PctionPlan: $('textarea[name=PctionPlan]').val(), Recommendation: $('textarea[name=Recommendation]').val(),
                        Followup: $('textarea[name=Followup]').val()
                    },
                    function (data, textStatus) {
                        if (textStatus != "success") {
                            result = "false";
                        }
                        else {
                            $('.modalGo').show();
                            $("#modOpen").click();
                            $(function () {
                                $("#modClose").click(function () {
                                    $.get('/Home/Index/', function (data) {
                                        window.location.href = '@Url.Action("Index","Home")'
                                    });
                                    $('.modalGo').hide();
                                });
                            });
                        }
                    //end post
                    });
            return false;
        //end
        });


    </script>

}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="body-content">
        <div class="form-horizontal">

            <!-- Trigger the modal with a button -->
            <div class="modallol" style="display:none;">
                <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal" id="modOpen" data-backdrop="static" data-keyboard="false">Open Modal</button>
            </div>

            <div class="modalGo" style="display:none;">
                <!-- Modal -->
                <div class="modal fade" id="myModal" role="dialog">
                    <div class="modal-dialog">

                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-body">
                                <strong>
                                    You have successfullly filed a counselling record for student: <br />
                                    @Html.DisplayFor(model => model.StudentLastName), @Html.DisplayFor(model => model.StudentFirstName) @Html.DisplayFor(model => model.StudentMiddleName)<br />
                                    @Html.DisplayFor(model => model.StudentID), @Html.DisplayFor(model => model.Program) - @Html.DisplayFor(model => model.YearLevel)
                                </strong>
                                <div class="pull-right">
                                    <button type="button" class="btn btn-default" id="modClose">Close</button>
                                    <br />
                                </div>
                                <br /><br />
                            </div>
                        </div>

                    </div>
                </div>
            </div>


            <div class="form-group">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="form-group">
                            <div class="controls form-inline">
                                <div class="controls form-inline">
                                    <div class="col-sm-4">
                                        <label for="Studentname">First Name</label><br />
                                        @Html.EditorFor(model => model.StudentFirstName, new { htmlAttributes = new { @style = "min-width:100%;text-align:center", @class = "form-control", @type = "text", @readonly = "readonly" } })
                                    </div>
                                    <div class="col-sm-4">
                                        <label for="Studentname">Middle Name</label><br />
                                        @Html.EditorFor(model => model.StudentMiddleName, new { htmlAttributes = new { @style = "min-width:100%;text-align:center", @class = "form-control", @type = "text", @readonly = "readonly" } })
                                    </div>
                                    <div class="col-sm-4">
                                        <label for="Studentname">Last Name</label><br />
                                        @Html.EditorFor(model => model.StudentLastName, new { htmlAttributes = new { @style = "min-width:100%;text-align:center", @class = "form-control", @type = "text", @readonly = "readonly" } })
                                    </div>
                                    <br />
                                    <div class="col-sm-4">
                                        <label for="Studentname">Program</label><br />
                                        @Html.EditorFor(model => model.Program, new { htmlAttributes = new { @style = "min-width:100%;text-align:center", @class = "form-control", @type = "text", @readonly = "readonly" } })
                                    </div>
                                    <div class="col-sm-4">
                                        <label for="Studentname">Student Number</label><br />
                                        @Html.EditorFor(model => model.StudentID, new { htmlAttributes = new { style = "min-width:100%;text-align:center", @class = "form-control", @type = "text", @readonly = "readonly" } })
                                    </div>
                                    <div class="col-sm-2">
                                        <label for="Studentname">Year Level</label><br />
                                        @Html.EditorFor(model => model.YearLevel, new { htmlAttributes = new { style = "min-width:100%;text-align:center", @class = "form-control", @type = "text", @readonly = "readonly" } })
                                    </div>
                                    <br />
                                    @Html.HiddenFor(model => model.StudentUserID)
                                </div>

                            </div>
                        </div>

                        <div id="studentSection">
                            <br />
                            <div class="controls form-inline">
                                @Html.LabelFor(model => model.Case, htmlAttributes: new { @class = "control-label" })<br />
                                @Html.ValidationMessageFor(model => model.Case, "", new { @class = "text-danger" })<br />

                                <div class="rowItem">
                                    <div class="selectWrapper">
                                        <select class="CounellingCaseSelect" id="CounellingCaseSelect">
                                            <!-- CounellingCaseOptTemp Template goes here -->
                                        </select>
                                        <template id="CounellingCaseOptTemp">
                                            <option class="CounellingCaseOpt">00CounellingCaseOpt</option>
                                        </template>
                                    </div>
                                </div>
                                <div class="rowItem">
                                    <div class="tagContainer" id="CounellingCaseTagCont">
                                        <!-- tagTemp template goes here -->
                                    </div>
                                    <template id="tagTemp">
                                        <div class="tag">
                                            <text>00tagName</text>
                                            <div class="tagClose"> <b>X</b></div>
                                        </div>
                                    </template>
                                </div>



                            </div>






                            <br />
                            <div class="controls form-inline">
                                @Html.LabelFor(model => model.Session, htmlAttributes: new { @class = "control-label" })<br />
                                @Html.TextAreaFor(model => model.Session, 4, 100, new { @class = "form-control", @style = "min-width: 70%;" })
                            </div>
                            <br />
                            <div class="controls form-inline">
                                @Html.LabelFor(model => model.PctionPlan, htmlAttributes: new { @class = "control-label" })<br />
                                @Html.TextAreaFor(model => model.PctionPlan, 4, 100, new { @class = "form-control", @style = "min-width: 70%;" })
                            </div>
                            <br />
                            <div class="controls form-inline">
                                @Html.LabelFor(model => model.Recommendation, htmlAttributes: new { @class = "control-label" })<br />
                                @Html.TextAreaFor(model => model.Recommendation, 4, 100, new { @class = "form-control", @style = "min-width: 70%;" })
                            </div>
                            
                        </div>
                        <br />
                        <div class="panel panel-default">
                            <div class="panel-heading">
                            <div class="controls form-inline">
                                @Html.Label("Guidance Counsellor: ")
                                @Html.DisplayFor(model => model.CounsellorLastName), @Html.DisplayFor(model => model.CounsellorFirstName) @Html.DisplayFor(model => model.CounsellorMiddleName)
                            </div>
                            </div>
                            <div class="panel-body">
                                <div class="controls form-inline">
                                    @Html.LabelFor(model => model.Followup, htmlAttributes: new { @class = "control-label" })<br />
                                    @Html.TextAreaFor(model => model.Followup, 5, 100, new { @class = "form-control", @style = "min-width: 90%;" })
                                    @Html.ValidationMessageFor(model => model.Followup, "", new { @class = "text-danger" })
                                </div>

                            </div>
                        </div>

                    </div>
                </div>
            </div>

           
            <div class="form-group">
                <div class="col-md-4 col-md-offset-5">
                    <input type="submit" value="Save" class="btn btn-default" />
                    @Html.ActionLink("Back", "Index", "Home", null, new { @class = "btn btn-default" })
                </div>
            </div>
           

        </div>
    </div>
}
